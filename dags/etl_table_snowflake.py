# -*- coding: utf-8 -*-
"""etl_table_snowflake.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nb9CFV1fW2FrpvwgzvsEoLS2T6_RXVkv
"""

from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.operators.python import get_current_context
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from datetime import datetime
from datetime import timedelta
import logging
import snowflake.connector
import requests




def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()





@task
def load():
    cur = return_snowflake_conn()
    try:
      sql_createstage="""CREATE OR REPLACE STAGE dev.raw_data.blob_stage
                    url = 's3://s3-geospatial/readonly/'
                    file_format = (type = csv, skip_header = 1,field_optionally_enclosed_by = '"');"""
      cur.execute(sql_createstage)
      sql_userchannel="""COPY INTO dev.raw_data.user_session_channel
            FROM @dev.raw_data.blob_stage/user_session_channel.csv;"""
      cur.execute(sql_userchannel)
      sql_session="""COPY INTO dev.raw_data.session_timestamp
                  FROM @dev.raw_data.blob_stage/session_timestamp.csv;"""
      cur.execute(sql_session)
    except Exception as e:
        print(e)
        raise e



@task
def createTable():
    target_table1 = "dev.raw_data.user_session_channel"
    target_table2 = "dev.raw_data.session_timestamp"
    cur = return_snowflake_conn()
    try:

        cur.execute(f"""CREATE TABLE IF NOT EXISTS {target_table1} (
                    userId int not NULL,
                    sessionId varchar(32) primary key,
                    channel varchar(32) default 'direct');""")

        cur.execute(f"""CREATE TABLE IF NOT EXISTS {target_table2} (
                      sessionId varchar(32) primary key,
                      ts timestamp
                      );""")

    except Exception as e:
        print(e)
        raise e


with DAG(
    dag_id = 'SetupETLtables',
    start_date = datetime(2024,10,24),
    catchup=False,
    tags=['ETL'],
    schedule = '30 2 * * *'
) as dag:

    createTable()
    load()